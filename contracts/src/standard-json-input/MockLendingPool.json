{
    "language": "Solidity",
    "sources": {
        "src/MockLendingPool.sol": {
            "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.13;\n\nimport \"@openzeppelin-contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {AggregatorV3Interface} from \"@chainlink/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\ncontract MockLendingPool {\n    mapping(address => mapping(address => uint256)) public reserve;\n    mapping(address => address[]) public reserveTokens;\n\n    mapping(address => mapping(address => uint256)) public debt;\n    mapping(address => address[]) public debtTokens;\n\n    mapping(address => address) public dataFeeds;\n\n    uint256 public globalDebtRate; // decimals 18, 1e18 = 100%\n\n    function setDataFeed(address asset, address dataFeed) public {\n        dataFeeds[asset] = dataFeed;\n    }\n\n    function setGlobalDebtRate(uint256 _globalDebtRate) public {\n        globalDebtRate = _globalDebtRate;\n    }\n\n    function getCalculatedPrice(address token) public view returns (uint256) {\n        if (dataFeeds[token] == address(0)) {\n            return 0;\n        } else {\n            // prettier-ignore\n            (\n                /* uint80 roundID */,\n                int256 answer,\n                /*uint startedAt*/,\n                /*uint timeStamp*/,\n                /*uint80 answeredInRound*/\n            ) = AggregatorV3Interface(dataFeeds[token]).latestRoundData();\n\n            return\n                (10 ** 18 * uint256(answer)) /\n                (10 **\n                    uint256(\n                        AggregatorV3Interface(dataFeeds[token]).decimals()\n                    ));\n        }\n    }\n\n    function getValue(\n        address token,\n        uint256 amount\n    ) public view returns (uint256) {\n        return\n            (amount * getCalculatedPrice(token)) /\n            10 ** IERC20Metadata(token).decimals();\n    }\n\n    function _increaseReserve(\n        address who,\n        address token,\n        uint256 amount\n    ) internal {\n        bool exists = false;\n        for (uint256 i = 0; i < reserveTokens[who].length; i++) {\n            if (reserveTokens[who][i] == token) {\n                exists = true;\n                break;\n            }\n        }\n\n        if (!exists) {\n            reserveTokens[who].push(token);\n        }\n\n        reserve[who][token] += amount;\n    }\n\n    function _decreaseReserve(\n        address who,\n        address token,\n        uint256 amount\n    ) internal {\n        require(\n            reserve[who][token] >= amount,\n            \"Not enough reserve to decrease\"\n        );\n\n        reserve[who][token] -= amount;\n\n        if (reserve[who][token] == 0) {\n            for (uint256 i = 0; i < reserveTokens[who].length; i++) {\n                if (reserveTokens[who][i] == token) {\n                    reserveTokens[who][i] = reserveTokens[who][\n                        reserveTokens[who].length - 1\n                    ];\n                    reserveTokens[who].pop();\n                    break;\n                }\n            }\n        }\n    }\n\n    function _increaseDebt(\n        address who,\n        address token,\n        uint256 amount\n    ) internal {\n        bool exists = false;\n        for (uint256 i = 0; i < debtTokens[who].length; i++) {\n            if (debtTokens[who][i] == token) {\n                exists = true;\n                break;\n            }\n        }\n\n        if (!exists) {\n            debtTokens[who].push(token);\n        }\n\n        debt[who][token] += amount;\n    }\n\n    function _decreaseDebt(\n        address who,\n        address token,\n        uint256 amount\n    ) internal {\n        require(debt[who][token] >= amount, \"Not enough debt to decrease\");\n\n        debt[who][token] -= amount;\n\n        if (debt[who][token] == 0) {\n            for (uint256 i = 0; i < debtTokens[who].length; i++) {\n                if (debtTokens[who][i] == token) {\n                    debtTokens[who][i] = debtTokens[who][\n                        debtTokens[who].length - 1\n                    ];\n                    debtTokens[who].pop();\n                    break;\n                }\n            }\n        }\n    }\n\n    // 获取用户所有 reserve 的总价值\n    function getReserveValueByAddress(\n        address who\n    ) public view returns (uint256) {\n        uint256 totalValue = 0;\n\n        for (uint256 i = 0; i < reserveTokens[who].length; i++) {\n            address token = reserveTokens[who][i];\n            uint256 amount = reserve[who][token];\n            uint256 value = getValue(token, amount);\n            totalValue += value;\n        }\n\n        return totalValue;\n    }\n\n    // 获取用户所有 debt 的总价值\n    function getDebtValueByAddress(address who) public view returns (uint256) {\n        uint256 totalValue = 0;\n\n        for (uint256 i = 0; i < debtTokens[who].length; i++) {\n            address token = debtTokens[who][i];\n            uint256 amount = debt[who][token];\n            uint256 value = getValue(token, amount);\n            totalValue += value;\n        }\n\n        return totalValue;\n    }\n\n    // 存款函数，将 msg.sender 的 reserveToken 存入，并计入 onBehalfOf 的 reserve 中\n    function deposit(\n        address reserveToken,\n        uint256 amount,\n        address onBehalfOf\n    ) external {\n        require(amount > 0, \"Amount must be greater than 0\");\n\n        // Transfer tokens from msg.sender to this contract\n        require(\n            IERC20(reserveToken).transferFrom(\n                msg.sender,\n                address(this),\n                amount\n            ),\n            \"Transfer failed\"\n        );\n\n        // 增加 onBehalfOf 的 reserve\n        _increaseReserve(onBehalfOf, reserveToken, amount);\n    }\n\n    // 提款函数，提取 msg.sender 记录下的 reserveToken，并转移给 onBehalfOf\n    function withdraw(\n        address reserveToken,\n        uint256 amount,\n        address onBehalfOf\n    ) external {\n        require(amount > 0, \"Amount must be greater than 0\");\n\n        // 减少 msg.sender 的 reserve\n        _decreaseReserve(msg.sender, reserveToken, amount);\n\n        // 检查 debt 和 reserve 之间的比例\n        uint256 debtValue = getDebtValueByAddress(msg.sender);\n        uint256 reserveValue = getReserveValueByAddress(msg.sender);\n        require(\n            debtValue * 1e18 <= reserveValue * globalDebtRate,\n            \"Debt to reserve ratio exceeds the global limit\"\n        );\n\n        // Transfer tokens from this contract to onBehalfOf\n        require(\n            IERC20(reserveToken).transfer(onBehalfOf, amount),\n            \"Transfer failed\"\n        );\n    }\n\n    // 借款函数，从合约转移指定数量的资产给 onBehalfOf，并增加 msg.sender 的 debt\n    function borrow(\n        address asset,\n        uint256 amount,\n        address onBehalfOf\n    ) external {\n        require(amount > 0, \"Amount must be greater than 0\");\n\n        // 增加 msg.sender 的 debt\n        _increaseDebt(msg.sender, asset, amount);\n\n        // 检查 debt 和 reserve 之间的比例\n        uint256 debtValue = getDebtValueByAddress(msg.sender);\n        uint256 reserveValue = getReserveValueByAddress(msg.sender);\n        require(\n            debtValue * 1e18 <= reserveValue * globalDebtRate,\n            \"Debt to reserve ratio exceeds the global limit\"\n        );\n\n        // Transfer tokens from this contract to onBehalfOf\n        require(IERC20(asset).transfer(onBehalfOf, amount), \"Transfer failed\");\n    }\n\n    // 还款函数，从 msg.sender 转移指定数量的资产到合约，并减少 onBehalfOf 的 debt\n    function repay(address asset, uint256 amount, address onBehalfOf) external {\n        require(amount > 0, \"Amount must be greater than 0\");\n\n        // 获取 onBehalfOf 的当前债务\n        uint256 debtAmount = debt[onBehalfOf][asset];\n\n        // 实际还款数量取 `amount` 和 `debtAmount` 之间的较小值\n        uint256 actualAmount = amount > debtAmount ? debtAmount : amount;\n\n        // Transfer tokens from msg.sender to this contract\n        require(\n            IERC20(asset).transferFrom(msg.sender, address(this), actualAmount),\n            \"Transfer failed\"\n        );\n\n        // 减少 onBehalfOf 的 debt\n        _decreaseDebt(onBehalfOf, asset, actualAmount);\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
        },
        "lib/chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
        }
    },
    "settings": {
        "remappings": [
            "forge-std/=lib/forge-std/src/",
            "solmate/=lib/solmate/src/",
            "@openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
            "@chainlink/=lib/chainlink/contracts/",
            "chainlink/=lib/chainlink/",
            "ds-test/=lib/solmate/lib/ds-test/src/",
            "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
            "openzeppelin-contracts/=lib/openzeppelin-contracts/",
            "openzeppelin/=lib/openzeppelin-contracts/contracts/"
        ],
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs"
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata"
                ]
            }
        },
        "evmVersion": "london",
        "viaIR": false,
        "libraries": {}
    }
}