{
    "language": "Solidity",
    "sources": {
        "src/MockShortMarket.sol": {
            "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.13;\n\nimport \"@openzeppelin-contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {AggregatorV3Interface} from \"@chainlink/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\ncontract MockShortMarket {\n    mapping(address => address) public dataFeeds;\n    mapping(address => mapping(address => Position)) public positions;\n\n    struct Position {\n        uint256 depositAmount;\n        uint256 openPrice;\n        uint256 leverage;\n        bool isOpen;\n    }\n\n    constructor() {}\n\n    function setDataFeed(address asset, address dataFeed) public {\n        dataFeeds[asset] = dataFeed;\n    }\n\n    function getPrice(address token) public view returns (uint256, uint256) {\n        if (dataFeeds[token] == address(0)) {\n            return (0, 0);\n        } else {\n            // prettier-ignore\n            (\n                /* uint80 roundID */,\n                int256 answer,\n                /*uint startedAt*/,\n                /*uint timeStamp*/,\n                /*uint80 answeredInRound*/\n            ) = AggregatorV3Interface(dataFeeds[token]).latestRoundData();\n\n            return (\n                uint256(answer),\n                uint256(AggregatorV3Interface(dataFeeds[token]).decimals())\n            );\n        }\n    }\n\n    function openShortPosition(\n        address token,\n        uint256 amount,\n        uint256 leverage\n    ) public returns (bool) {\n        require(\n            !positions[token][msg.sender].isOpen,\n            \"position already exists\"\n        );\n        require(amount > 0, \"invalid amount\");\n        require(\n            leverage >= 1 && leverage <= 50,\n            \"leverage must be in 1X ~ 50X\"\n        );\n\n        (uint256 price, ) = getPrice(token);\n        require(price != 0, \"invalid price\");\n\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\n\n        positions[token][msg.sender] = Position({\n            depositAmount: amount,\n            openPrice: price,\n            leverage: leverage,\n            isOpen: true\n        });\n\n        return true;\n    }\n\n    function closePosition(address token, address owner) public returns (bool) {\n        require(positions[token][owner].isOpen, \"position already exists\");\n\n        Position memory position = positions[token][owner];\n        delete positions[token][owner];\n\n        (uint256 price, ) = getPrice(token);\n        require(price != 0, \"invalid price\");\n\n        if (position.openPrice >= price) {\n            require(msg.sender == owner, \"alive position\");\n\n            // 有盈利\n            uint256 priceDifference = position.openPrice - price;\n            uint256 profit = (priceDifference *\n                position.depositAmount *\n                position.leverage) / price;\n\n            uint256 totalReturn = profit + position.depositAmount;\n\n            IERC20(token).transfer(owner, totalReturn);\n        } else {\n            uint256 priceDifference = price - position.openPrice;\n            uint256 loss = (priceDifference *\n                position.depositAmount *\n                position.leverage) / price;\n\n            if (loss < position.depositAmount) {\n                require(msg.sender == owner, \"alive position\");\n                uint256 remain = position.depositAmount - loss;\n                IERC20(token).transfer(owner, remain);\n            }\n        }\n\n        return true;\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
        },
        "lib/chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
        }
    },
    "settings": {
        "remappings": [
            "forge-std/=lib/forge-std/src/",
            "solmate/=lib/solmate/src/",
            "@openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
            "@chainlink/=lib/chainlink/contracts/",
            "chainlink/=lib/chainlink/",
            "ds-test/=lib/solmate/lib/ds-test/src/",
            "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
            "openzeppelin-contracts/=lib/openzeppelin-contracts/",
            "openzeppelin/=lib/openzeppelin-contracts/contracts/"
        ],
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs"
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata"
                ]
            }
        },
        "evmVersion": "london",
        "viaIR": false,
        "libraries": {}
    }
}